
# Main Pipeline File: azure-pipelines.yml

#This file defines the overall structure, triggers, parameters, and stages. It calls the template for the actual deployment steps.

# azure-pipelines.yml
#
# Main pipeline definition for deploying Apigee X API Proxies using GKE self-hosted agents.
# This pipeline builds the proxy bundle and orchestrates deployments across environments
# by calling a reusable deployment job template.

# =========================================================================
#                            Pipeline Parameters
# =========================================================================
parameters:
- name: apiProxyName
  displayName: '1. API Proxy Name'
  type: string
  # helpText: 'Enter the exact name of the API Proxy as it should appear in Apigee (e.g., my-cool-api).'
- name: environmentGroup
  displayName: '2. Target Apigee Environment Group'
  type: string
  values:
  - edd
  - wow
  - wpay
  - homerun
  # helpText: 'Select the Apigee Environment Group this deployment targets.'

# =========================================================================
#                                Triggers
# =========================================================================
# Controls when the pipeline runs automatically.
trigger:
  batch: true # Batches multiple commits into a single run if possible
  branches:
    include:
    - main        # Trigger prod deploy from main branch merges/commits
    - release/*   # Trigger test/uat deploy from release branches (e.g., release/v1.2)
    - develop     # Trigger dev deploy from develop branch commits

# =========================================================================
#                                Variables
# =========================================================================
variables:
  # --- Global Configuration ---
  # Define GCP Project IDs and Agent Pool names.
  # Consider moving these to a Variable Group in AzDO Library for easier management.
  nonProdGcpProject: 'your-nonprod-project-id' # <-- TODO: Update with your Non-Prod Project ID
  prodGcpProject: 'your-prod-project-id'     # <-- TODO: Update with your Prod Project ID
  apigeeOrgNonProd: $(nonProdGcpProject)      # Apigee Org ID usually matches Project ID for Apigee X
  apigeeOrgProd: $(prodGcpProject)
  nonProdAgentPool: 'gke-nonprod-agents'     # AzDO Agent Pool running on Non-Prod GKE
  prodAgentPool: 'gke-prod-agents'         # AzDO Agent Pool running on Prod GKE
  agentKsaNamespace: 'azdo-agents'           # Kubernetes namespace where agents run
  agentKsaName: 'azdo-agent-ksa'             # Kubernetes Service Account name for agents

  # --- Dynamically Set in Stages ---
  # These variables are overridden within each deployment stage to target the correct environment.
  gcpProject: ''             # Will be set to nonProdGcpProject or prodGcpProject
  apigeeOrg: ''              # Will be set to apigeeOrgNonProd or apigeeOrgProd
  apigeeEnv: ''              # Will be set to 'dev', 'test', 'uat', or 'prod'
  agentPoolName: ''          # Will be set to nonProdAgentPool or prodAgentPool
  targetGcpServiceAccount: '' # Will be constructed based on envGroup, envType, and project

# Reference to the current repository
resources:
  repositories:
  - repository: self
    type: git
    ref: refs/heads/main # Specifies the default branch where the pipeline definition lives

# =========================================================================
#                                  Stages
# =========================================================================
stages:

# -------------------------------------------------------------------------
# Stage: Build
# Purpose: Compile, lint (optional), package the Apigee proxy, and publish artifact.
# Runs On: Non-Prod Agents (builds don't typically need Prod access)
# -------------------------------------------------------------------------
- stage: Build
  displayName: Build API Proxy Bundle
  pool:
    name: $(nonProdAgentPool)
  jobs:
  - job: Build
    displayName: Build and Publish Artifact ($(parameters.apiProxyName))
    steps:
    - checkout: self # Checks out the source code of the branch that triggered the pipeline
      displayName: 'Checkout Source Code'

    - task: Bash@3
      displayName: 'DEBUG: List files in checkout directory'
      inputs:
        targetType: 'inline'
        script: |
          echo "##[command]Listing files in $(Build.SourcesDirectory)"
          ls -la $(Build.SourcesDirectory)
      continueOnError: true # Don't fail build if listing fails

    # --- Optional: Linting Step ---
    # Uncomment and configure if you use apigeelint or another linter
    # - task: Bash@3
    #   displayName: 'Lint API Proxy (Optional)'
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       echo "INFO: Installing apigeelint (ensure Node.js/npm is available on agent)..."
    #       # npm install -g apigeelint
    #       echo "INFO: Running linter on ./apiproxy folder..."
    #       # apigeelint -s ./apiproxy -f json.reporter.js # Example command
    #       # Add logic here to check linting results and potentially fail the build
    #       echo "WARNING: Actual linting execution skipped in this example."
    #   failOnStderr: false # Set to true if lint failure should stop the build

    - task: Bash@3
      displayName: 'Zip API Proxy Bundle ($(parameters.apiProxyName))'
      inputs:
        targetType: 'inline'
        script: |
          set -e # Exit immediately if a command exits with a non-zero status.
          PROXY_FOLDER="./apiproxy" # Standard Apigee proxy source folder structure
          ZIP_FILE_NAME="$(parameters.apiProxyName)_bundle.zip"
          echo "INFO: Preparing to zip contents of '$PROXY_FOLDER' into '$ZIP_FILE_NAME'"
          echo "INFO: Current directory: $(pwd)"
          echo "INFO: Contents of current directory:"
          ls -l
          if [ -d "$PROXY_FOLDER" ]; then
            echo "INFO: Zipping API proxy source from '$PROXY_FOLDER'..."
            zip -r $ZIP_FILE_NAME $PROXY_FOLDER/ -x "*.git*" "*node_modules*" "*.DS_Store*" "*tests*"
            echo "INFO: Successfully created API Proxy bundle: $ZIP_FILE_NAME"
            echo "INFO: Listing created zip file details:"
            ls -l $ZIP_FILE_NAME
          else
            echo "##vso[task.logissue type=error;]ERROR: Proxy source directory '$PROXY_FOLDER' not found! Cannot create bundle."
            exit 1
          fi
        failOnStderr: true # Fail the task if the script writes to stderr or exits non-zero

    - task: PublishPipelineArtifact@1
      displayName: 'Publish API Proxy Bundle Artifact'
      inputs:
        targetPath: '$(Build.SourcesDirectory)/$(parameters.apiProxyName)_bundle.zip' # Path to the file created in the previous step
        artifact: '$(parameters.apiProxyName)-proxy' # Name of the artifact in Azure DevOps
        publishLocation: 'Container' # Standard artifact storage
      # helpText: 'This makes the zipped proxy available to subsequent deployment stages.'

# -------------------------------------------------------------------------
# Stage: Deploy_Dev
# Purpose: Deploy the built proxy artifact to the DEV environment.
# Runs On: Non-Prod Agents
# Triggered By: Successful Build stage AND (source branch is 'develop' OR manual run)
# -------------------------------------------------------------------------
- stage: Deploy_Dev
  displayName: 'Deploy to DEV ($(parameters.environmentGroup))'
  dependsOn: Build
  condition: and(succeeded('Build'), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.Reason'], 'Manual')))
  variables:
    # --- Stage-Specific Overrides ---
    gcpProject: $(nonProdGcpProject)
    apigeeOrg: $(apigeeOrgNonProd)
    apigeeEnv: 'dev'
    agentPoolName: $(nonProdAgentPool)
    # Construct the email address of the GCP Service Account needed for this specific deployment
    targetGcpServiceAccount: '$(parameters.environmentGroup)-$(apigeeEnv)-sa@$(nonProdGcpProject).iam.gserviceaccount.com'
  pool:
    name: $(agentPoolName)
  jobs:
  # Call the reusable deployment template, passing parameters specific to this stage
  - template: templates/apigee-deploy-job.yml
    parameters:
      gcpProject: $(gcpProject)
      apigeeOrg: $(apigeeOrg)
      apigeeEnv: $(apigeeEnv)
      apiProxyName: $(parameters.apiProxyName)
      targetGcpServiceAccount: $(targetGcpServiceAccount)
      agentKsaNamespace: $(agentKsaNamespace)
      agentKsaName: $(agentKsaName)
      artifactName: '$(parameters.apiProxyName)-proxy'
      azdoEnvironmentName: 'Apigee-$(apigeeEnv)-${{ parameters.apiProxyName }}' # Link to AzDO Environment

# -------------------------------------------------------------------------
# Stage: Deploy_Test
# Purpose: Deploy the proxy to the TEST environment. Requires Approval.
# Runs On: Non-Prod Agents
# Triggered By: Successful Deploy_Dev stage AND (source branch starts with 'release/' OR manual run)
# -------------------------------------------------------------------------
- stage: Deploy_Test
  displayName: 'Deploy to TEST ($(parameters.environmentGroup))'
  dependsOn: Deploy_Dev
  condition: and(succeeded('Deploy_Dev'), or(startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), eq(variables['Build.Reason'], 'Manual')))
  variables:
    gcpProject: $(nonProdGcpProject)
    apigeeOrg: $(apigeeOrgNonProd)
    apigeeEnv: 'test'
    agentPoolName: $(nonProdAgentPool)
    targetGcpServiceAccount: '$(parameters.environmentGroup)-$(apigeeEnv)-sa@$(nonProdGcpProject).iam.gserviceaccount.com'
  pool:
    name: $(agentPoolName)
  jobs:
  - template: templates/apigee-deploy-job.yml
    parameters:
      gcpProject: $(gcpProject)
      apigeeOrg: $(apigeeOrg)
      apigeeEnv: $(apigeeEnv)
      apiProxyName: $(parameters.apiProxyName)
      targetGcpServiceAccount: $(targetGcpServiceAccount)
      agentKsaNamespace: $(agentKsaNamespace)
      agentKsaName: $(agentKsaName)
      artifactName: '$(parameters.apiProxyName)-proxy'
      azdoEnvironmentName: 'Apigee-$(apigeeEnv)-${{ parameters.apiProxyName }}' # Link to AzDO Environment for Approvals

# -------------------------------------------------------------------------
# Stage: Deploy_UAT
# Purpose: Deploy the proxy to the UAT environment. Requires Approval.
# Runs On: Non-Prod Agents
# Triggered By: Successful Deploy_Test stage AND (source branch starts with 'release/' OR manual run)
# -------------------------------------------------------------------------
- stage: Deploy_UAT
  displayName: 'Deploy to UAT ($(parameters.environmentGroup))'
  dependsOn: Deploy_Test
  condition: and(succeeded('Deploy_Test'), or(startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), eq(variables['Build.Reason'], 'Manual')))
  variables:
    gcpProject: $(nonProdGcpProject)
    apigeeOrg: $(apigeeOrgNonProd)
    apigeeEnv: 'uat'
    agentPoolName: $(nonProdAgentPool)
    targetGcpServiceAccount: '$(parameters.environmentGroup)-$(apigeeEnv)-sa@$(nonProdGcpProject).iam.gserviceaccount.com'
  pool:
    name: $(agentPoolName)
  jobs:
  - template: templates/apigee-deploy-job.yml
    parameters:
      gcpProject: $(gcpProject)
      apigeeOrg: $(apigeeOrg)
      apigeeEnv: $(apigeeEnv)
      apiProxyName: $(parameters.apiProxyName)
      targetGcpServiceAccount: $(targetGcpServiceAccount)
      agentKsaNamespace: $(agentKsaNamespace)
      agentKsaName: $(agentKsaName)
      artifactName: '$(parameters.apiProxyName)-proxy'
      azdoEnvironmentName: 'Apigee-$(apigeeEnv)-${{ parameters.apiProxyName }}' # Link to AzDO Environment for Approvals

# -------------------------------------------------------------------------
# Stage: Deploy_Prod
# Purpose: Deploy the proxy to the PRODUCTION environment. Requires Approval.
# Runs On: *** Production Agents *** (Critical Isolation)
# Triggered By: Successful Deploy_UAT stage AND (source branch is 'main' OR manual run)
# -------------------------------------------------------------------------
- stage: Deploy_Prod
  displayName: 'Deploy to PROD ($(parameters.environmentGroup))'
  dependsOn: Deploy_UAT
  condition: and(succeeded('Deploy_UAT'), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.Reason'], 'Manual')))
  variables:
    # --- Stage-Specific Overrides for PRODUCTION ---
    gcpProject: $(prodGcpProject) # Switch to PROD project
    apigeeOrg: $(apigeeOrgProd)   # Switch to PROD org
    apigeeEnv: 'prod'
    agentPoolName: $(prodAgentPool) # Switch to PROD agent pool!
    targetGcpServiceAccount: '$(parameters.environmentGroup)-$(apigeeEnv)-sa@$(prodGcpProject).iam.gserviceaccount.com' # Use PROD SA
  pool:
    name: $(agentPoolName)
  jobs:
  - template: templates/apigee-deploy-job.yml
    parameters:
      gcpProject: $(gcpProject)
      apigeeOrg: $(apigeeOrg)
      apigeeEnv: $(apigeeEnv)
      apiProxyName: $(parameters.apiProxyName)
      targetGcpServiceAccount: $(targetGcpServiceAccount)
      agentKsaNamespace: $(agentKsaNamespace)
      agentKsaName: $(agentKsaName)
      artifactName: '$(parameters.apiProxyName)-proxy'
      azdoEnvironmentName: 'Apigee-$(apigeeEnv)-${{ parameters.apiProxyName }}' # Link to AzDO Environment for Approvals





